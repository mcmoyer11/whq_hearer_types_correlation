install.packages(c("bootstrap", "dplyr", "ggplot2", "magrittr", "tidyr"))
brary(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(bootstrap)
library(ggpubr)
library(psych)
library(likert)
library(reshape2)
library(lme4)
library(languageR)
library(ordinal)
library(lmerTest)
library(FSA)
library(lattice)
library(boot)
library(rcompanion)
library(MASS)
library(Hmisc)
library(reshape2)
library(foreign)
# First, set the working directory
setwd("/Users/morganmoyer/
# prop nf-how/how vs. prop nf-where/where
prop.test(c(2664,425), c(21261,8163), alternative = "two.sided", correct = FALSE)
# prop nf-how/how vs. prop nf-where/where
prop.test(c(2664,425), c(21261,8163), alternative = "two.sided", correct = FALSE)
# prop nf-how/how vs. prop nf-where/where
prop.test(c(2664,425), c(23177,10772), alternative = "two.sided", correct = FALSE)
# prop nf-how/how vs. prop nf-who/who
prop.test(c(2664,59), c(23177,3785), alternative = "two.sided", correct = FALSE)
# prop nf-where/where vs. prop nf-who/who
prop.test(c(425,59), c(10772,3785), alternative = "two.sided", correct = FALSE)
# prop who-fin/who vs. where-fin/where
prop.test(c(3426,9658), c(3785,10772), alternative = "two.sided", correct = FALSE)
# prop who-fin/who vs. where-fin/where
prop.test(c(6748,7660), c(7500,8163), alternative = "two.sided", correct = FALSE)
# prop who-fin/who vs. where-fin/where
prop.test(c(6748,7660), c(7500,8163), alternative = "two.sided", correct = FALSE)
brary(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(bootstrap)
library(ggpubr)
library(psych)
library(likert)
library(reshape2)
library(lme4)
library(languageR)
library(ordinal)
library(lmerTest)
library(FSA)
library(lattice)
library(boot)
library(rcompanion)
library(MASS)
library(Hmisc)
library(reshape2)
library(foreign)
# First, set the working directory
setwd("/Users/morganmoyer/Drop
###################################################
# CLAUSETYPE OVERALL
###################################################
# finite, modal, non-finite over all EMB/ROOT
prop.test(c(59030,10142, 3233), c(72405,72405,72405), alternative = "two.sided", correct = FALSE)
###################################################
# CLAUSETYPE OVERALL
###################################################
# finite, modal, non-finite over all EMB/ROOT
prop.test(c(59030,10142,3233), c(72405,72405,72405), alternative = "two.sided", correct = FALSE)
###################################################
# CLAUSETYPE OVERALL
###################################################
# finite, modal, non-finite over all EMB/ROOT
prop.test(c(59030,10142), c(72405,72405), alternative = "two.sided", correct = FALSE)
72405-59030
prop.test(c(59030,13375), c(72405,72405), alternative = "two.sided", correct = FALSE)
###################################################
# WH OVERALL
###################################################
# how-questions versus non-how questions
prop.test(c(43422,28983), c(72405,72405), alternative = "two.sided", correct = FALSE)
# Modal how vers other modal wh
prop.test(c(8017,2125), c(10142,10142), alternative = "two.sided", correct = FALSE)
###################################################
# Overall can vs other modals
###################################################
prop.test(c(3365,6777), c(10142,10142), alternative = "two.sided", correct = FALSE)
###################################################
# Overall can vs other modals
###################################################
prop.test(c(3365,2103), c(10142,10142), alternative = "two.sided", correct = FALSE)
###################################################
#  see-can vs know-can
###################################################
prop.test(c(204,164), c(3394,3394), alternative = "two.sided", correct = FALSE)
2942+452
###################################################
#  In CAN, how vs others
###################################################
prop.test(c(2942,452), c(3394,3394), alternative = "two.sided", correct = FALSE)
###################################################
#  How: prop modal CT with degree questions to without
###################################################
prop.test(c(8017,6373), c(43422,30797), alternative = "two.sided", correct = FALSE)
156+17+1
# Low: finite vs. modal
prop.test(c(156,17), c(174,174), alternative = "two.sided", correct = FALSE)
#  Stats for Con_Prob
# Date: June 2, 2019
############################
# Stats for Reaction Time Study
############################
require(dplyr)
setwd("/Users/morganmoyer/Dropbox/Moyer_research/Embedded_Questions/Dissertation/Experiments/Reaction_time/")
read.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,"Ibex",sep=".");return(cols)}) {
n.cols <- max(count.fields(filepath,sep=",",quote=NULL),na.rm=TRUE)
if (auto.colnames){
cols <- c()
con <- file(filepath, "r")
while ( TRUE ) {
line <- readLines(con, n = 1, warn=FALSE)
if ( length(line) == 0) {
break
}
m <- regmatches(line,regexec("^# (\\d+)\\. (.+)\\.$",line))[[1]]
if (length(m) == 3) {
index <- as.numeric(m[2])
value <- m[3]
if (index < length(cols)){
cols <- c()
}
if (is.function(fun.col)){
cols <- fun.col(value,cols)
}
cols[index] <- value
if (index == n.cols){
break
}
}
}
close(con)
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=cols))
}
else{
return(read.csv(filepath, comment.char="#", header=FALSE, col.names=seq(1:n.cols)))
}
}
r <- read.pcibex("results")
id = unique(r$ID)
write.csv(id,"id.csv")
