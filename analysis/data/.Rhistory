install.packages(c("bootstrap", "dplyr", "ggplot2", "magrittr", "tidyr"))
brary(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(bootstrap)
library(ggpubr)
library(psych)
library(likert)
library(reshape2)
library(lme4)
library(languageR)
library(ordinal)
library(lmerTest)
library(FSA)
library(lattice)
library(boot)
library(rcompanion)
library(MASS)
library(Hmisc)
library(reshape2)
library(foreign)
# First, set the working directory
setwd("/Users/morganmoyer/
# prop nf-how/how vs. prop nf-where/where
prop.test(c(2664,425), c(21261,8163), alternative = "two.sided", correct = FALSE)
# prop nf-how/how vs. prop nf-where/where
prop.test(c(2664,425), c(21261,8163), alternative = "two.sided", correct = FALSE)
# prop nf-how/how vs. prop nf-where/where
prop.test(c(2664,425), c(23177,10772), alternative = "two.sided", correct = FALSE)
# prop nf-how/how vs. prop nf-who/who
prop.test(c(2664,59), c(23177,3785), alternative = "two.sided", correct = FALSE)
# prop nf-where/where vs. prop nf-who/who
prop.test(c(425,59), c(10772,3785), alternative = "two.sided", correct = FALSE)
# prop who-fin/who vs. where-fin/where
prop.test(c(3426,9658), c(3785,10772), alternative = "two.sided", correct = FALSE)
# prop who-fin/who vs. where-fin/where
prop.test(c(6748,7660), c(7500,8163), alternative = "two.sided", correct = FALSE)
# prop who-fin/who vs. where-fin/where
prop.test(c(6748,7660), c(7500,8163), alternative = "two.sided", correct = FALSE)
brary(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(bootstrap)
library(ggpubr)
library(psych)
library(likert)
library(reshape2)
library(lme4)
library(languageR)
library(ordinal)
library(lmerTest)
library(FSA)
library(lattice)
library(boot)
library(rcompanion)
library(MASS)
library(Hmisc)
library(reshape2)
library(foreign)
# First, set the working directory
setwd("/Users/morganmoyer/Drop
###################################################
# CLAUSETYPE OVERALL
###################################################
# finite, modal, non-finite over all EMB/ROOT
prop.test(c(59030,10142, 3233), c(72405,72405,72405), alternative = "two.sided", correct = FALSE)
###################################################
# CLAUSETYPE OVERALL
###################################################
# finite, modal, non-finite over all EMB/ROOT
prop.test(c(59030,10142,3233), c(72405,72405,72405), alternative = "two.sided", correct = FALSE)
###################################################
# CLAUSETYPE OVERALL
###################################################
# finite, modal, non-finite over all EMB/ROOT
prop.test(c(59030,10142), c(72405,72405), alternative = "two.sided", correct = FALSE)
72405-59030
prop.test(c(59030,13375), c(72405,72405), alternative = "two.sided", correct = FALSE)
###################################################
# WH OVERALL
###################################################
# how-questions versus non-how questions
prop.test(c(43422,28983), c(72405,72405), alternative = "two.sided", correct = FALSE)
# Modal how vers other modal wh
prop.test(c(8017,2125), c(10142,10142), alternative = "two.sided", correct = FALSE)
###################################################
# Overall can vs other modals
###################################################
prop.test(c(3365,6777), c(10142,10142), alternative = "two.sided", correct = FALSE)
###################################################
# Overall can vs other modals
###################################################
prop.test(c(3365,2103), c(10142,10142), alternative = "two.sided", correct = FALSE)
###################################################
#  see-can vs know-can
###################################################
prop.test(c(204,164), c(3394,3394), alternative = "two.sided", correct = FALSE)
2942+452
###################################################
#  In CAN, how vs others
###################################################
prop.test(c(2942,452), c(3394,3394), alternative = "two.sided", correct = FALSE)
###################################################
#  How: prop modal CT with degree questions to without
###################################################
prop.test(c(8017,6373), c(43422,30797), alternative = "two.sided", correct = FALSE)
156+17+1
# Low: finite vs. modal
prop.test(c(156,17), c(174,174), alternative = "two.sided", correct = FALSE)
plot2)
library(ggpubr) # need this for ggboxplot()
library(tidyr)
library(dplyr)
library(magrittr)
library(bootstrap)
library(lme4)
library(ordinal)
library(co
library(corrgram)
setwd("/Users/morganmoyer/Dropbox/Moyer_research/Embedded_Questions/Dissertation/Experiments/Reaction_time/results/")
source("../../helpers.R")
# The file is the one saved from the Jupyter Notebook
q <- read.csv("q_withscores.csv")
# head(q)
q = q%>%
mutate(., Value.n = recode(Value, Agree = 1, Disagree = 0)) %>%
group_by(WhichAnswer, goal) %>%
mutate(meanValue = mean(Value.n))
log_subs = subset(q, q$logical > .5)
prag_subs = subset(q, q$logical < .5)
log_agr = log_subs %>%
mutate(., Value = recode(Value, Agree = 1, Disagree = 0)) %>%
group_by(WhichAnswer,verb,WhichQuestion,goal) %>%
summarise(Proportion_Agree = mean(Value), CILow = ci.low(Value), CIHigh = ci.high(Value)) %>%
mutate(YMin = Proportion_Agree - CILow, YMax = Proportion_Agree + CIHigh)
dodge = position_dodge(.9)
prag_agr = prag_subs %>%
mutate(., Value = recode(Value, Agree = 1, Disagree = 0)) %>%
group_by(WhichAnswer,verb,WhichQuestion,goal) %>%
summarise(Proportion_Agree = mean(Value), CILow = ci.low(Value), CIHigh = ci.high(Value)) %>%
mutate(YMin = Proportion_Agree - CILow, YMax = Proportion_Agree + CIHigh)
prag_msmoma <- subset(prag_subs, prag_subs$WhichAnswer == "MS" |
prag_subs$WhichAnswer == "MO" |
prag_subs$WhichAnswer == "MA" )
kruskal.test(Value ~ goal, data = prag_msmoma)
kruskal.test(Value ~ goal, data = log_msmoma)
log_msmoma <- subset(log_subs, log_subs$WhichAnswer == "MS" |
log_subs$WhichAnswer == "MO" |
log_subs$WhichAnswer == "MA" )
kruskal.test(Value ~ interaction(WhichAnswer,goal), data = log_msmoma)
# Kruskal-Wallis chi-squared = 8.5605, df = 2, p-value = 0.01384
kruskal.test(Value ~ WhichAnswer, data = log_msmoma)
# Kruskal-Wallis chi-squared = 8.5605, df = 2, p-value = 0.01384
kruskal.test(Value ~ WhichQuestion, data = log_msmoma)
interWAG = interaction(log_msmoma$WhichAnswer,log_msmoma$goal)
pairwise.wilcox.test(log_msmoma$Value, interWAG)
pairwise.wilcox.test(log_msmoma$Value, interWAG, p.adjust.method = "BH")
pairwise.wilcox.test(log_msmoma$as.numeric(Value), interWAG, p.adjust.method = "BH")
pairwise.wilcox.test(log_msmoma$Value.n, interWAG, p.adjust.method = "BH")
# Kruskal-Wallis chi-squared = 30.592, df = 2, p-value = 2.275e-07
kruskal.test(Value ~ WhichQuestion, data = prag_msmoma)
interWAG = interaction(prag_msmoma$WhichAnswer,prag_msmoma$goal)
pairwise.wilcox.test(prag_msmoma$Value.n, interWAG, p.adjust.method = "BH")
log_msmoma_none <- subset(log_msmoma,  log_msmoma$goal == "none")
kruskal.test(Value~WhichAnswer, data = log_msmoma_none)
# Kruskal-Wallis chi-squared = 15.098, df = 2, p-value = 0.0005266
pairwise.wilcox.test(log_msmoma_none$Value,log_msmoma_none$none, p.adjust.method = "BH")
# Kruskal-Wallis chi-squared = 15.098, df = 2, p-value = 0.0005266
pairwise.wilcox.test(log_msmoma_none$Value,log_msmoma_none$WhichAnswer, p.adjust.method = "BH")
# Kruskal-Wallis chi-squared = 15.098, df = 2, p-value = 0.0005266
pairwise.wilcox.test(log_msmoma_none$Value.n,log_msmoma_none$WhichAnswer, p.adjust.method = "BH")
#       MA      MO
# MO 0.00380 -
# MS 0.00035 0.37562
kruskal.test(Value~WhichQuestion, data = log_msmoma_none)
